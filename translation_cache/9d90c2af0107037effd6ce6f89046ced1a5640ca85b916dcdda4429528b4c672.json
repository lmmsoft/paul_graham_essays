{
  "original": "| | [](index.html)  \n  \n| [](https://s.turbifycdn.com/aah/paulgraham/undergraduation-11.gif)  \n  \n  \n  \n|  **Want to start a startup?** Get funded by [Y Combinator](http://ycombinator.com/apply.html)....",
  "translation": "| | [](index.html)  \n  \n| [](https://s.turbifycdn.com/aah/paulgraham/undergraduation-11.gif)  \n  \n  \n  \n|  **想创业？** 获得 [Y Combinator](http://ycombinator.com/apply.html) 的资金支持。    \n  \n---  \n  \n2005年3月  \n  \n _(本文部分内容最初是对学生来信提问的回复。)_  \n  \n最近我收到几封计算机专业本科生的邮件，询问大学期间该做什么。我可能不是最佳建议来源，因为大学时我主修哲学。不过我选修了太多计算机课程，以至于多数计算机专业学生都以为我是他们中的一员。至少，我确实是个黑客。  \n  \n **黑客之道**  \n  \n大学期间如何成为[优秀黑客](gh.html)？有两件事至关重要：精通编程，深入了解某些酷炫的特定问题。这两者本质相通，因为每件事都会推动你去做另一件。  \n  \n成为编程高手的途径是（a）大量（b）攻克难题。而让自己坚持攻克难题的方法，是投身于极具吸引力的项目。  \n  \n这类项目通常不会是课堂作业。我的朋友Robert本科时通过编写网络软件学到很多。他曾将哈佛重新接入Arpanet（该网络曾是早期节点，但到1984年连接已中断）[1]。这项目不仅与课程无关，还让他因荒废学业被勒令休学一年[2]。最终结果证明付出值得——他现在是MIT教授。不过你最好别走这种极端，当年他可没少焦虑。  \n  \n另一条精进之路是向高手学习。程序员会按工作类型和工具形成不同圈子，有些圈子[更聪明](pypar.html)。观察身边聪明人在做什么，通常存在深层原因。  \n  \n教授可能是你身边最聪明的人。成为研究助理是接触有趣工作的好方法。教授尤其需要能解决繁琐系统管理问题的人，这是打开机会之门的突破口。他们最怕遇到混日子和刷简历的人——太多助理最终反而增加了工作量。你必须明确自己会是净减负者。  \n  \n被拒绝也别气馁。拒绝往往没你想的那么针对个人。换下个目标就行（追异性同理）。  \n  \n注意：虽然多数教授聪明，但并非所有人都研究有趣课题。教授需要发表新成果推动职业发展，而越有趣的领域竞争越激烈。于是有些教授会产出系列\"新颖\"论文——其结论只因无人关心才显独特。这类研究最好避开。  \n  \n我从未当过研究助理，所以推荐这条路径时有点心虚。我是通过自主编程学习，特别是尝试逆向工程Winograd的SHRDLU。当时我对那个程序的痴迷程度堪比母亲对待新生儿。  \n  \n独立工作的劣势是孤独，优势则是完全自主。无需妥协或请示，有新想法坐下就能实现。  \n  \n个人项目不必像教授那样追求创新，或像企业那样考虑盈利。技术难度才是关键，而这与应用性质无关。\"严肃\"如数据库的应用常技术平庸（失眠时不妨读数据库文献），\"轻浮\"如游戏的程序反而技术精深。我相信某些游戏公司的智力成果，能碾压九成大学计算机系的科研。  \n  \n若我现在读本科，可能会钻研图形学：比如网络游戏或3D动画工具。当年计算机性能不足导致图形学乏味，但如今这恐怕是最有趣的方向了。  \n  \n **数学**  \n  \n我读大学时，许多教授坚信（或希望）[计算机科学](hp.html)是数学分支。哈佛这观念最甚——1980年代前连计算机专业都没有，只能主修应用数学。康奈尔情况也差不多。当我向可怕的Conway教授表示对AI感兴趣（当时的热点），他建议我改学数学。至今我不确定他是认为AI需要数学基础，还是觉得AI纯属胡闹，想用严谨数学治好我的愚蠢野心。  \n  \n实际上，黑客所需的数学远比多数院系声称的少。我认为掌握高中数学加上计算理论的部分概念足矣（比如必须明白n^2算法才能避免写出它）。当然，编写数学应用除外——比如机器人领域全是数学。  \n  \n尽管多数编程不需解微分方程这类数学技巧，但数学本身绝对值得学习。它能为你提供解决各类问题的隐喻[3]。正因如此，我后悔大学没多修数学课。  \n  \n和多数人一样，我童年遭受过数学虐待。老师把数学教成一堆既不美、又与生活无关的公式（尽管试图转化为\"应用题\"），只为考试死记硬背。  \n  \n大学最该做的事之一，是弄清数学的真正本质。这不容易，因为优秀数学家往往不善教学。虽然数学科普书不少，但佳作寥寥。我认为W. W. Sawyer的书最佳，当然还有欧几里得[4]。  \n  \n **通识教育**  \n  \n赫胥黎说：\"尽量广博地涉猎，精深地专研。\"多数大学追求这种理想。  \n  \n但\"广博\"指什么？我认为是所有人在认真解决难题时获得的智慧。这类工作本质相通——某个领域的思路常能成功移植到看似遥远的领域。比如我写[文章](essay.html)和写软件方式相同：先快速敲出糟糕的初稿，再用数周重写。  \n  \n单攻克难题还不够。炼金术士也在解决难题，但其方法谬误到除了自欺欺人外毫无学习价值。不幸的是，我大学时钻研的AI领域也有同样缺陷：用明显不足的技术轻率挑战超难问题。是勇敢？更接近欺诈。  \n  \n社会科学也较虚浮，受学术[潮流](say.html)影响太大。物理学家遇见百年前的同行能传授新知；心理学家遇见百年前的同行只会陷入意识形态争论。当然，心理学课也有价值，但选其他领域的课收获更大。  \n  \n我认为值得学习的领域包括：数学、硬科学、工程、历史（尤其是经济史/社会史/科学史）、建筑、古典学。艺术史概论可能有价值。现代文学很重要，但自学阅读即可。音乐领域我不够了解。  \n  \n可以跳过社会科学、哲学和因政治压力新设的院系。这些领域确实探讨重要问题，但探讨方式无效。比如哲学讨论人与人之间的义务，但智慧祖母或E.B.怀特的作品比哲学教授更能给你启发。  \n  \n我现身说法：当人们嘲笑克林顿说\"这取决于'是'这个词的含义是什么\"时，我本该感到被冒犯——大学时我修了五门关于\"是\"之含义的课程。  \n  \n判断学科价值的另一方法是绘制\"退学流向图\"。比如我认识许多因数学太难转计算机专业的人，却未见反向案例。人不会无故选择更难的路——除非回报成正比（或至少log(n)）。因此数学可能比计算机科学更值得学习。通过类似比较，你能绘制全校各院系价值图谱，底层是智力含量最低的学科。  \n  \n用此法得出的结论与我前述建议大致吻合。  \n  \n语言课是特例，最好视为陶艺课般的课外活动。若结合海外生活体验会实用得多。我大一突发奇想学阿拉伯语，付出巨大却只收获识别闪族词根的奇怪能力，以及对人类识词机制的些许洞察。  \n  \n艺术创作与写作课像抽奖。通常老师不怎么教，只是让学生自由创作（或不创作），然后在松散指导下互评作品。但写作和艺术都是有人真诚钻研的难题，值得尝试——尤其找到好老师时。  \n  \n **工作**  \n  \n大学生当然不能只考虑学习，还需思考两个现实问题：工作和研究生院。  \n  \n理论上通识教育不提供职业培训，但众所周知这是善意的谎言。每个学校的黑客都在学习实用技能，且非偶然。  \n  \n该学什么取决于想找的工作。想进大公司就学Windows下的[Blub](avg.html)语言；想去酷炫小公司或实验室就学Linux下的Ruby；想创业（我认为会越来越普遍）就掌握能找到的最强大工具——你将与竞争对手赛跑，这些工具就是你的赛马。  \n  \n在校所学与职场所用技能并非直接对应。大学目标应定得稍高些。  \n  \n橄榄球员训练时能卧推300磅，尽管比赛从不需要这么大力量。同样，教授让你学习比职场所需更超前的知识，未必因为他们脱离现实，可能是想让你的大脑\"举重\"。  \n  \n课堂编程与真实编程有三点关键差异：规模小；从零开始；问题常是人为设定的。现实中程序更庞大，常涉及既有代码，且往往需要先定义问题再解决。  \n  \n不必等到毕业（甚至入学）才学习这些技能。比如想学习处理既有代码，可以参与开源项目。优秀雇主对此的重视程度不亚于课堂作业高分。  \n  \n现有开源项目很少锻炼第三项技能——决定解决什么问题。但你可以自主启动新项目，这会让优秀雇主更印象深刻。  \n  \n该解决什么问题？答案是：你作为用户需要什么。比如我偶然发明优秀垃圾邮件过滤算法，就因自己想屏蔽垃圾邮件。现在我渴望能防止收件箱爆满的邮件客户端——我把收件箱当待办清单用，但这像用螺丝刀开瓶盖，真正需要的是开瓶器。  \n  \n **研究生院**  \n  \n该读研吗？如何进入好学校？  \n  \n理论上研究生院是研究职业培训，除非想以研究为业否则不该读。但半数计算机博士最终未进入研究领域。我读研就不是为当教授，而是想学更多。  \n  \n所以如果你痴迷编程却去读研，会发现许多同类人。当半数人都与你同样\"错位\"，真的算错位吗？  \n  \n\"计算机科学\"存在根本性问题——没人确定\"研究\"该是什么。很多研究只是被硬塞进论文形式的编程成果，只为增加发表量。  \n  \n因此问\"是否适合读研\"容易误导——几乎没人真正适合计算机科学，整个领域都处于认知失调中。热爱编程不该阻碍你读研，但要准备好做大量不喜欢的事。  \n  \n头号噩梦是毕业论文。几乎所有人写完时都痛恨自己的论文。这个过程注定产出令人不快的成果，就像用全麦粉烘烤十二小时的蛋糕。少有人（尤其是作者自己）会愉快阅读毕业论文。  \n  \n但无数前辈都熬过来了。除此之外，研究生院近乎天堂。许多人视其为人生最快乐时光，而其他多数人（包括我）则认为——如果没有毕业论文，那本应如此[5]。  \n  \n研究生院的危险在于：恐怖部分不会提前显现。前几年仍是大学延续，等面临论文恐惧时已深陷数年。此时放弃会背负\"辍学\"标签，多数人不愿接受。当Robert因编写1988年蠕虫病毒被开除时，我无比羡慕他找到了免于\"失败\"污名的退出方式。  \n  \n总体而言，研究生院可能优于多数选择。你能遇见许多聪明人，共同的拖延抑郁至少成为强力纽带。当然最终还能获得博士学位——我差点忘了，这总归有点价值。  \n  \n博士学位的最大价值（除了作为学术界的入场券）或许是赋予基准自信。比如我家霍尼韦尔恒温器的UI极其反人类。我母亲认真研读整天说明书才学会操作，她以为是自己的问题。而我会想：\"如果计算机博士都搞不懂这设计，那它肯定烂透了。\"  \n  \n若听完这番模棱两可的建议仍想读研，我可以给出实用申请策略。如今许多朋友是计算机教授，我了解录取内幕——与本科截然不同。研究生录取由教授决定，他们非常认真，因为录取者将为其工作。  \n  \n顶尖学校基本只看推荐信。标准化考试毫无价值，成绩影响甚微。个人陈述主要是说蠢话自毁的机会。教授只信任推荐信，最好是熟人写的[6]。  \n  \n因此申请博士项目的关键，是给教授留下印象。据我的教授朋友透露，真正打动他们的是：不刻意讨好。只为读研而刷高分或当研究助理不会打动他们，真正热爱课题的学生才会。  \n  \n所以无论为读研还是成为优秀黑客，大学最该做的是找到真正热爱之事。你很难骗教授录取你，更不可能骗问题让你解决。大学是\"伪装\"失效的起点。此后除非想去大公司（如同退回高中），否则唯一出路就是做你[热爱](love.html)之事。  \n  \n  \n  \n  \n  \n **注释**  \n  \n[1] 当时无人介意，可见直到1984年Arpanet（互联网前身）仍无足轻重。  \n  \n[2] 因此我成为雇主后从不看GPA。事实上我们主动寻找被退学者。有次在哈佛贴海报：\"是否因沉迷个人项目荒废学业被退学？来为我们工作吧！\"真找到个这样的孩子，结果是个出色黑客。  \n  \n哈佛让退学生休学一年去工作，本意是展示现实世界多残酷，好让他们珍惜复学机会。但来我们这工作的家伙玩得比上学还开心，那年股票期权收入超过所有教授工资。于是年底他非但没悔悟返校，反而又休学一年去了欧洲。最终他约26岁才毕业。  \n  \n[3] Eric Raymond认为对黑客最有用的数学是集合论、组合数学和图论。  \n  \nTrevor Blackwell提醒：要选数学专业开的课。\"'工科数学'烂透了。实际上所有'工科x'（包括数学、法律、写作和视觉设计）都很糟。\"  \n  \n[4] 其他强烈推荐书籍：柯朗与罗宾斯的《数学是什么？》、希尔伯特与康福森的《直观几何》。对平面设计感兴趣可看[伯恩版《几何原本》](http://www.math.ubc.ca/people/faculty/cass/Euclid/byrne.html)。  \n  \n[5] 完美人生的做法是：读研头一两年秘密写完论文，之后三年逍遥度日，偶尔交一章。这设想会让研究生流口水，但我没见过真有执行力实现的人。  \n  \n[6] 有位教授朋友说，每年录取的15-20%研究生是\"高风险人选\"——指申请材料完美，但推荐人无人认识。  \n  \n因此想读理科研究生，本科就要去有真正研究型教授的学校。否则录取委员会总会觉得你风险高，无论多优秀。  \n  \n这导致惊人却必然的后果：小型文理学院注定衰亡。多数聪明高中生至少考虑过理科方向，何必选择限制自己选项的大学？  \n  \n  \n  \n **致谢** 感谢Trevor Blackwell、Alex Lewin、Jessica Livingston、Robert Morris、Eric Raymond和几位[匿名计算机教授](undergrad2.html)阅读本文草稿，以及最初提问的学生们。  \n  \n  \n  \n  \n  \n  \n---  \n| | [更多本科生建议](undergrad2.html)  \n  \n  \n| | [Joel Spolsky：计算机专业学生建议](http://www.joelonsoftware.com/articles/CollegeAdvice.html)  \n  \n  \n| | [Eric Raymond：如何成为黑客](http://www.catb.org/~esr/faqs/hacker-howto.html)",
  "timestamp": "2025-07-14T12:20:10.340574",
  "model": "deepseek-ai/DeepSeek-V3"
}