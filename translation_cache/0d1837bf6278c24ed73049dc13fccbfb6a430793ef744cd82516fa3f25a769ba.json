{
  "original": "| | [](index.html)  \n  \n|   \n  \n|  **Want to start a startup?** Get funded by [Y Combinator](http://ycombinator.com/apply.html).    \n  \n---  \n  \nJuly 2004  \n  \n _(This essay is derived from a talk at ...",
  "translation": "| | [](index.html)  \n  \n|   \n  \n|  **想创业吗？** 获得 [Y Combinator](http://ycombinator.com/apply.html) 的资助。    \n  \n---  \n  \n2004年7月  \n  \n _(本文改编自2004年Oscon大会的演讲。)_  \n  \n几个月前我完成了一本新[书](http://www.amazon.com/exec/obidos/tg/detail/-/0596006624)，而在书评中我不断看到诸如“挑衅性”和“争议性”这样的字眼。更别提“愚蠢”了。  \n  \n我并非有意让这本书引发争议。我只是想让它更高效。我不想浪费读者的时间去讲述他们早已知道的事情。直接呈现差异会更有效率。但我想这注定会写出一本令人不安的书。  \n  \n**爱迪生们**  \n  \n最具争议的观点毫无争议：财富差异可能并不像我们想象的那么严重。  \n  \n我在书中并未说财富差异本身是好事。我说在某些情况下，它可能是好事的征兆。剧烈的头痛不是好事，但它可能是好事的征兆——比如你在头部受击后正在恢复意识。  \n  \n财富差异可能是生产力差异的体现。（在一个人的社会中，两者是相同的。）而后者几乎肯定是好事：如果你的社会中没有生产力差异，很可能不是因为人人都是托马斯·爱迪生，而是因为你根本没有托马斯·爱迪生。  \n  \n在低技术社会中，你看不到太大的生产力差异。如果一个游牧部落的人在收集生火的树枝，最擅长收集树枝的人会比最差的人效率高多少？两倍？而当你给人们一个复杂的工具，比如计算机时，他们能用它做的事情差异是巨大的。  \n  \n这不是新观点。弗雷德·布鲁克斯在1974年就写过，而他引用的研究发表于1968年。但我认为他低估了程序员之间的差异。他写的是代码行数的生产力：最好的程序员能用十分之一的时间解决给定的问题。但如果问题不是给定的呢？在编程中，就像在许多领域一样，困难的部分不是解决问题，而是决定解决什么问题。想象力很难衡量，但在实践中，它主导了以代码行数衡量的生产力。  \n  \n生产力在任何领域都有差异，但很少有领域像编程这样差异巨大。程序员之间的差异如此之大，以至于变成了质的区别。我不认为这是编程特有的。在每个领域，技术都放大了生产力的差异。我认为编程中发生的情况只是因为我们有大量的技术杠杆。但在每个领域，杠杆都在变长，所以随着时间的推移，越来越多的领域会看到这种差异。而公司和国家的成功将越来越取决于他们如何处理它。  \n  \n如果生产力的差异随着技术而增加，那么最有生产力的个体的贡献不仅会不成比例地大，而且实际上会随着时间的推移而增长。当你达到一个群体90%的产出由1%的成员创造时，如果某些因素（无论是维京人的袭击还是中央计划）将他们的生产力拖到平均水平，你会损失惨重。  \n  \n如果我们想充分利用他们，就需要了解这些特别有生产力的人。什么激励着他们？他们工作需要什么？你如何识别他们？如何让他们来为你工作？当然还有问题，如何成为他们中的一员？  \n  \n**不仅仅是金钱**  \n  \n我认识一些超级黑客，所以我坐下来思考他们的共同点。他们的决定性特质可能是他们真的热爱编程。普通程序员写代码是为了谋生。伟大的黑客认为这是他们为了乐趣而做的事情，并且很高兴发现有人会为此付钱给他们。  \n  \n伟大的程序员有时被认为对金钱漠不关心。这不完全正确。他们真正关心的确实是做有趣的工作。但如果你赚了足够的钱，你就可以做任何你想做的工作，因此黑客确实会被赚大钱的想法吸引。但只要他们仍然需要每天上班，他们就更关心在那里做什么，而不是能拿多少钱。  \n  \n从经济学的角度来看，这是一个极其重要的事实，因为这意味着你不需要支付伟大黑客与他们价值相当的报酬。一个伟大的程序员可能比普通程序员高效十倍或一百倍，但他会认为自己很幸运能拿到三倍的薪水。正如我稍后会解释的，部分原因是伟大的黑客不知道他们有多优秀。但也因为金钱不是他们主要想要的东西。  \n  \n黑客想要什么？像所有工匠一样，黑客喜欢好工具。实际上，这还轻描淡写了。优秀的黑客觉得使用糟糕的工具是无法忍受的。他们会直接拒绝在错误的基础设施上工作。  \n  \n在我曾经工作过的一家初创公司，我们的公告板上钉着一则IBM的广告。那是一张AS400的照片，标题大概是“黑客鄙视它”。[1]  \n  \n当你决定为一个项目使用什么基础设施时，你不仅是在做一个技术决定，也是在做一个社会决定，而后者可能比前者更重要。例如，如果你的公司想写一些软件，用Java写似乎是一个谨慎的选择。但当你选择一种语言时，你也在选择一个社区。你能雇来从事Java项目的程序员不会像你能雇来从事Python项目的人那样[聪明](pypar.html)。而你的黑客的质量可能比你选择的语言更重要。不过，坦率地说，优秀的黑客更喜欢Python而不是Java，这应该能告诉你这两种语言的相对优劣。  \n  \n商业人士更喜欢最流行的语言，因为他们将语言视为标准。他们不想把公司押在Betamax上。但语言不仅仅是标准。如果你必须通过网络传输数据，一定要使用TCP/IP。但编程语言不仅仅是一种格式。编程语言是一种表达媒介。  \n  \n我读到Java刚刚超过Cobol成为最流行的语言。作为一个标准，你不能再奢求更多了。但作为一种表达媒介，你可以做得更好。在我能想到的所有伟大程序员中，我只知道一个会自愿用Java编程的人。而在我能想到的所有不为Sun公司从事Java工作的伟大程序员中，我知道的为零。  \n  \n伟大的黑客通常也坚持使用开源软件。不仅因为它更好，还因为它给了他们更多的控制权。优秀的黑客坚持控制权。这是他们成为优秀黑客的部分原因：当某些东西坏了，他们需要修复它。你希望他们对为你编写的软件有这种感觉。当他们觉得操作系统也应该如此时，你不应该感到惊讶。  \n  \n几年前，一位风险投资家朋友告诉我他参与的一家新初创公司。听起来很有前途。但下次我和他交谈时，他说他们决定在Windows NT上构建软件，并刚刚聘请了一位非常有经验的NT开发人员担任首席技术官。当我听到这个消息时，我想，这些人完蛋了。首先，这位首席技术官不可能是一流的黑客，因为要成为著名的NT开发人员，他必须多次自愿使用NT，而我无法想象一个伟大的黑客会这样做；其次，即使他很优秀，如果项目必须在NT上构建，他也很难雇到任何优秀的人为他工作。[2]  \n  \n**最后的边疆**  \n  \n除了软件，对黑客来说最重要的工具可能是他的办公室。大公司认为办公空间的功能是表达等级。但黑客使用办公室不仅仅是为了这个：他们把办公室当作思考的地方。如果你是一家科技公司，他们的思想就是你的产品。所以让黑客在嘈杂、分散注意力的环境中工作，就像在空气中充满煤灰的油漆厂工作一样。  \n  \n漫画《呆伯特》对隔间有很多话要说，而且有充分的理由。我认识的所有黑客都鄙视它们。仅仅是可能被打断的念头就足以阻止黑客解决难题。如果你想在一个有隔间的办公室里完成真正的工作，你有两个选择：在家工作，或者在别人不在的时候早来、晚来或周末来。公司难道没有意识到这是一个问题的征兆吗？办公环境应该是帮助你工作的东西，而不是你勉强工作的东西。  \n  \n像思科这样的公司以每个人（包括CEO）都有一个隔间为荣。但他们并没有他们想象的那么先进；显然他们仍然将办公空间视为等级的象征。还要注意的是，思科以很少进行内部产品开发而闻名。他们通过收购创造了新技术的初创公司来获取新技术——在那里，黑客们确实有安静的地方工作。  \n  \n微软是一家了解黑客需求的大公司。我曾经看到微软的一则招聘广告，上面有一扇门的大图。前提是：为我们工作，我们会给你一个可以真正完成工作的地方。你知道，微软在大公司中很突出，因为他们能够在内部开发软件。也许不够好，但足够好。  \n  \n如果公司希望黑客高效工作，他们应该看看黑客在家做什么。在家里，黑客可以自己安排事情，以便完成最多的工作。当黑客在家工作时，他们不会在嘈杂、开放的空间工作；他们在有门的房间里工作。他们在舒适、邻里般的地方工作，周围有人，有地方可以散步，当他们需要思考时，而不是在玻璃盒子里，周围是成片的停车场。他们有一张沙发，当他们感到疲倦时可以小睡一会儿，而不是坐在办公桌前假装工作。没有一群人在黄金编程时间每晚用吸尘器轰鸣而过。没有会议，或者更糟的公司团建或团队建设活动。当你看看他们在电脑上做什么时，你会发现这强化了我之前关于工具的说法。他们可能不得不在工作中使用Java和Windows，但在家里，他们可以自由选择时，你更可能发现他们使用Perl和Linux。  \n  \n事实上，关于Cobol或Java是最流行语言的统计数据可能会产生误导。如果我们想知道什么工具是最好的，我们应该看看黑客在可以自由选择时会选择什么——也就是说，在他们自己的项目中。当你问这个问题时，你会发现开源操作系统已经占据了主导市场份额，而排名第一的语言可能是Perl。  \n  \n**有趣**  \n  \n除了好工具，黑客还想要有趣的项目。什么让一个项目有趣？显然，像隐形飞机或特效软件这样性感的应用会很有趣。但任何应用如果提出了新颖的技术挑战，都可能变得有趣。因此，很难预测黑客会喜欢哪些问题，因为有些问题只有在从事它们的人发现了一种新的解决方案时才变得有趣。在ITA（Orbitz内部软件的开发者）之前，从事航空公司票价搜索的人可能认为这是可以想象的最无聊的应用之一。但ITA通过以更雄心勃勃的方式[重新定义](carl.html)问题使其变得有趣。  \n  \n我认为谷歌也发生了同样的事情。当谷歌成立时，所谓门户网站的普遍看法是搜索既无聊又不重要。但谷歌的人并不认为搜索无聊，这就是他们做得如此出色的原因。  \n  \n这是管理者可以有所作为的领域。就像父母对孩子说：“我打赌你不能在十分钟内打扫完整个房间”一样，一个好的管理者有时可以通过将问题重新定义为更有趣的问题来激励团队。史蒂夫·乔布斯似乎特别擅长这一点，部分原因仅仅是因为他有高标准。在Mac之前有很多小型、廉价的电脑。他将问题重新定义为：制造一个漂亮的电脑。这可能比任何胡萝卜或大棒更能激励开发者。  \n  \n他们确实做到了。当Mac第一次出现时，你甚至不需要打开它就知道它会很好；你可以从机箱上看出来。几周前，我在剑桥的街上走着，在某个人的垃圾中看到了一个看起来像Mac手提箱的东西。我往里看，发现了一台Mac SE。我把它带回家，插上电源，它启动了。快乐的Macintosh笑脸，然后是Finder。天哪，它太简单了。就像……谷歌。  \n  \n黑客喜欢为有高标准的人工作。但仅仅严格是不够的。你必须坚持正确的事情。这通常意味着你自己也必须是一个黑客。我偶尔会看到关于如何管理程序员的文章。实际上应该有两篇文章：一篇是关于如果你是程序员自己该怎么做，另一篇是关于如果你不是程序员该怎么做。而第二篇可能可以压缩成两个字：放弃。  \n  \n问题不在于日常管理。真正优秀的黑客实际上是自我管理的。问题是，如果你不是一个黑客，你无法分辨谁是优秀的黑客。类似的问题解释了为什么美国汽车如此丑陋。我称之为“设计悖论”。你可能会认为，只要雇一个伟大的设计师来设计，你就能让你的产品变得漂亮。但如果你自己没有好的[品味](taste.html)，你怎么能认出一个好的设计师呢？从定义上讲，你无法从他的作品集中看出来。你也不能根据他赢得的奖项或他做过的工作来判断，因为在设计领域，就像在大多数领域一样，这些往往是由时尚和人际关系驱动的，实际能力排在第三位。没有办法绕过它：如果你不知道什么是美，你就无法管理一个旨在生产美丽事物的过程。美国汽车丑陋是因为美国汽车公司的掌舵人品味糟糕。  \n  \n在这个国家，许多人认为品味是一种难以捉摸甚至轻浮的东西。它两者都不是。为了推动设计，管理者必须是公司产品最苛刻的用户。如果你真的有好的品味，你可以像史蒂夫·乔布斯那样，让满足你成为优秀人才喜欢解决的问题。  \n  \n**烦人的小问题**  \n  \n很容易说什么样的问题是无趣的：那些不是解决几个大而清晰的问题，而是必须解决许多烦人的小问题的问题。最糟糕的项目之一是为一个充满bug的软件编写接口。另一个是根据个别客户复杂且定义不清的需求定制某些东西。对黑客来说，这类项目就像千刀万剐。  \n  \n烦人的小问题的特点是，你从中学不到任何东西。编写编译器很有趣，因为它教会你什么是编译器。但为一个充满bug的软件编写接口不会教会你任何东西，因为bug是随机的。[3] 所以，优秀黑客避免烦人的小问题不仅仅是出于挑剔。更多的是自我保护的问题。处理烦人的小问题会让你变得愚蠢。优秀黑客避免它，就像模特避免芝士汉堡一样。  \n  \n当然，有些问题本身就有这种特点。由于供求关系，它们的报酬特别高。因此，一家能找到方法让优秀黑客处理枯燥问题的公司将非常成功。你会怎么做？  \n  \n初创公司是一个这样的地方。在我们的初创公司，罗伯特·莫里斯担任系统管理员。这就像让滚石乐队在成人礼上表演。你无法雇佣这种人才。但人们会为公司做任何苦差事，只要他们是创始人。[4]  \n  \n更大的公司通过划分公司来解决这个问题。他们通过建立一个单独的研发部门来吸引聪明人，员工不必直接处理客户的烦人小问题。[5] 在这种模式下，研究部门就像一个矿山。他们产生新想法；也许公司的其他部门能够利用它们。  \n  \n你可能不需要走这么远。[自底向上编程](progbot.html)提出了另一种划分公司的方法：让聪明人担任工具制造者。如果你的公司制作x类软件，让一个小组构建编写该类软件的工具，另一个小组使用这些工具编写应用程序。这样，你或许能让聪明人编写99%的代码，同时让他们几乎像在传统研究部门一样与用户隔离。工具制造者会有用户，但他们只是公司自己的开发人员。[6]  \n  \n如果微软采用这种方法，他们的软件就不会有这么多安全漏洞，因为编写实际应用程序的不那么聪明的人不会做像分配内存这样的底层工作。他们不是直接用C编写Word，而是用Word语言的大乐高积木拼在一起。（我相信，技术术语是Duplo。）  \n  \n**聚集**  \n  \n除了有趣的问题，优秀黑客喜欢的还有其他的优秀黑客。伟大的黑客往往会聚集在一起——有时非常壮观，比如在施乐帕克研究中心。所以你吸引优秀黑客的能力与你为他们创造的环境的好坏不成线性比例。聚集的趋势意味着它更像是环境的平方。所以赢家通吃。在任何时候，只有大约十到二十个地方是黑客最想去工作的，如果你不是其中之一，你不仅会有更少的伟大黑客，你会有零个。  \n  \n拥有伟大黑客本身并不足以让一家公司成功。这对谷歌和ITA很有效，它们是现在的热点，但它对思维机器公司或施乐没有帮助。Sun曾经风光过一段时间，但他们的商业模式是下行的。在这种情况下，即使是最好的黑客也救不了你。  \n  \n不过，我认为在其他条件相同的情况下，能够吸引伟大黑客的公司将具有巨大的优势。有些人会不同意这一点。当我们在20世纪90年代拜访风险投资公司时，有几家告诉我们，软件公司不是通过编写伟大的软件获胜，而是通过品牌、主导渠道和做正确的交易。  \n  \n他们似乎真的相信这一点，我想我知道为什么。我认为许多风险投资家寻找的，至少是无意识地，是下一个微软。当然，如果微软是你的榜样，你不应该寻找希望通过编写伟大软件获胜的公司。但风险投资家寻找下一个微软是错误的，因为没有一家初创公司能成为下一个微软，除非另一家公司准备在适当的时刻弯腰成为下一个IBM。  \n  \n以微软为榜样是错误的，因为他们的整个文化都源于那一次幸运的突破。微软是一个糟糕的数据点。如果你抛开他们，你会发现好产品确实倾向于在市场上获胜。风险投资家应该寻找的是下一个苹果，或下一个谷歌。  \n  \n我认为比尔·盖茨知道这一点。他对谷歌的担忧不是他们品牌的力量，而是他们有更好的黑客。[7]  \n  \n**认可**  \n  \n那么谁是伟大的黑客？当你遇到一个时，你怎么知道？事实证明这非常困难。即使是黑客也无法分辨。我现在非常确定我的朋友特雷弗·布莱克威尔是一个伟大的黑客。你可能在Slashdot上读过他如何制作自己的[赛格威](http://www.tlb.org/scooter.html)。这个项目的显著之处在于，他在一天内写完了所有软件（顺便说一下，用的是Python）。  \n  \n对特雷弗来说，这是家常便饭。但当我第一次见到他时，我以为他是个彻头彻尾的白痴。他站在罗伯特·莫里斯的办公室里对他喋喋不休地说着什么，我记得我站在他身后疯狂地向罗伯特打手势，让他把这个疯子赶出办公室，这样我们就可以去吃午饭了。罗伯特说他一开始也看错了特雷弗。显然，当罗伯特第一次见到他时，特雷弗刚刚开始一个新计划，涉及将生活的方方面面记录在一叠索引卡上，他走到哪里都带着这些卡片。他刚从加拿大来，带着浓重的加拿大口音和鲻鱼头。  \n  \n问题更加复杂的是，尽管黑客以社交迟钝著称，但有时他们会花很大力气让自己看起来聪明。我在研究生院时，偶尔会去MIT人工智能实验室转转。一开始有点吓人。那里的每个人都说得很快。但过了一段时间，我学会了快速说话的技巧。你不需要想得更快；只要用两倍的词来说每件事。  \n  \n在这种信号的噪音中，很难在遇到优秀黑客时认出他们。即使是现在，我也无法分辨。你也不能从他们的简历中看出来。似乎评判一个黑客的唯一方法是与他合作做点什么。  \n  \n这就是高科技区域只出现在大学周围的原因。这里的活性成分不是教授，而是学生。初创公司在大学周围成长，因为大学将前途无量的年轻人聚集在一起，让他们在相同的项目上工作。聪明的人会知道其他聪明的人是谁，然后一起策划他们自己的新项目。  \n  \n因为你无法通过合作以外的方式判断一个伟大的黑客，黑客自己也不知道他们有多优秀。这在大多数领域都是如此。我发现，那些在某方面非常出色的人，与其说他们确信自己的伟大，不如说他们对为什么其他人看起来如此无能感到困惑。  \n  \n但对黑客来说，知道自己有多优秀尤其困难，因为很难比较他们的工作。这在大多数其他领域更容易。在百米赛跑中，你可以在10秒内知道谁最快。即使在数学领域，似乎也有一个普遍的共识，哪些问题难以解决，什么构成了一个好的解决方案。但黑客就像写作。谁能说哪部小说更好？当然不是作者。  \n  \n至少，其他黑客可以分辨。这是因为，与小说家不同，黑客在项目上合作。当你通过网络向某人抛出几个难题时，你很快就能知道他们回应的力度。但黑客无法观察自己的工作。所以如果你问一个伟大的黑客他有多优秀，他几乎肯定会回答，我不知道。他不是在谦虚。他真的不知道。  \n  \n我们谁都不知道，除了那些我们真正合作过的人。这让我们处于一个奇怪的境地：我们不知道该崇拜谁。那些成名的黑客往往因为公关的随机事件而成名。有时我需要举一个伟大黑客的例子，而我从来不知道该用谁。首先想到的名字总是我认识的人，但用他们似乎很蹩脚。所以，我想，也许我应该说理查德·斯托曼，或林纳斯·托瓦兹",
  "timestamp": "2025-07-14T12:11:34.889988",
  "model": "deepseek-ai/DeepSeek-V3"
}