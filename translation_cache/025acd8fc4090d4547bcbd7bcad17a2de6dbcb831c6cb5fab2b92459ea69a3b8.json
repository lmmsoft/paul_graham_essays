{
  "original": "| | [](index.html)  \n  \n| [](https://s.turbifycdn.com/aah/paulgraham/the-roots-of-lisp-13.gif)  \n  \nMay 2001   \n  \n_(I wrote this article to help myself understand exactly what McCarthy discovered. Yo...",
  "translation": "| | [](index.html)  \n\n| [](https://s.turbifycdn.com/aah/paulgraham/the-roots-of-lisp-13.gif)  \n\n2001年5月  \n\n（我写这篇文章是为了帮助自己真正理解麦卡锡的发现。虽然用Lisp编程无需了解这些内容，但对于任何想理解Lisp本质的人——无论是其起源还是语义核心——这都大有裨益。拥有这样的核心正是Lisp的鲜明特征，也是它与其他语言不同且存在多种方言的原因。）  \n\n1960年，[约翰·麦卡锡](http://www-formal.stanford.edu/jmc/index.html)发表了一篇非凡的论文，他在编程领域的贡献堪比欧几里得之于几何学。他展示了如何用几个简单的操作符和函数表示法，构建出完整的编程语言。他将这种语言命名为Lisp（“列表处理”），其核心思想之一是使用名为_列表_的简单数据结构来同时表示代码和数据。  \n\n理解麦卡锡的发现意义重大，这不仅是计算机史上的里程碑，更为当今编程的发展方向提供了范本。在我看来，迄今为止只有两种真正清晰、一致的编程模型：C模型和Lisp模型。它们如同高地，之间则是沼泽般的洼地。随着计算机性能的提升，新开发的语言正[稳步](diff.html)向Lisp模型靠拢。过去20年流行的一种新语言设计方法，就是在C计算模型的基础上逐步加入Lisp模型的特性，如运行时类型和垃圾回收。  \n\n本文我将用最简明的语言阐释麦卡锡的发现。目的不仅是了解四十年前某人提出的有趣理论成果，更是为了揭示语言的演进方向。Lisp的独特之处——事实上是其定义性特质——在于它能用自身来编写。为了理解麦卡锡这句话的含义，我们将重走他的探索之路，并将其数学符号转化为可运行的Common Lisp代码。  \n\n---  \n\n---  \n[完整文章（Postscript版）](https://sep.turbifycdn.com/ty/cdn/paulgraham/jmc.ps?t=1688221954&)  \n\n[Lisp的独特之处](diff.html)  \n\n[代码](https://sep.turbifycdn.com/ty/cdn/paulgraham/jmc.lisp?t=1688221954&)  \n\n[中文翻译](http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html)  \n\n[日文翻译](http://d.hatena.ne.jp/lionfan/20070202)  \n\n[葡萄牙语翻译](http://www.ciul.ul.pt/~tca/pdf/rootsoflisp.pdf)  \n\n[韩文翻译](http://blog.java2game.com/270)  \n\n* * *  \n\n---",
  "timestamp": "2025-07-14T12:44:44.413130",
  "model": "deepseek-ai/DeepSeek-V3"
}