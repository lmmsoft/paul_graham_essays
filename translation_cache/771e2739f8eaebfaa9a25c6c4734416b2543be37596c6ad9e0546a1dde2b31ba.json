{
  "original": "**1\\. Conditionals.** A conditional is an if-then-else construct. We take these for granted now. They were [invented](http://www-formal.stanford.edu/jmc/history/lisp/node2.html) by McCarthy in the cou...",
  "translation": "**1. 条件表达式。** 条件表达式即if-then-else结构。如今我们对此习以为常，它是由麦卡锡在开发Lisp过程中[发明](http://www-formal.stanford.edu/jmc/history/lisp/node2.html)的（当时Fortran仅具备基于底层硬件分支指令的条件跳转功能）。作为Algol委员会成员的麦卡锡将条件表达式引入Algol，由此传播至大多数其他语言。\n\n**2. 函数类型。** 在Lisp中，函数是一等对象——它们与整数、字符串等数据类型无异，具有字面表示形式，可存储于变量中，也能作为参数传递。\n\n**3. 递归。** 递归作为数学概念早于Lisp存在，但Lisp是首个支持递归的编程语言（将函数作为一等对象隐含着这一特性）。\n\n**4. 全新的变量概念。** Lisp中所有变量本质上都是指针。类型属于值而非变量，变量赋值或绑定意味着复制指针而非其所指内容。\n\n**5. 垃圾回收机制。**\n\n**6. 由表达式构成的程序。** Lisp程序是表达式树，每个表达式都返回值（某些Lisp方言支持多值返回）。这与Fortran及多数后继语言形成对比，后者严格区分表达式与语句。\n\nFortran的这种区分很自然：由于该语言基于打孔卡输入格式，其设计以行为单位。语句不可嵌套。数学运算需要表达式，但其他结构无需返回值——因为没有接收返回值的上下文。\n\n随着块结构语言的出现，这一限制本应消失，但为时已晚。表达式与语句的区分已根深蒂固，从Fortran蔓延至Algol，进而影响两者后代。\n\n当语言完全由表达式构成时，表达式可自由组合。例如（使用[Arc](arc.html)语法）既可写：\n```lisp\n(if foo (= x 1) (= x 2))\n```\n也可写：\n```lisp\n(= x (if foo 1 2))\n```\n\n**7. 符号类型。** 符号与字符串的区别在于可通过指针比较来测试相等性。\n\n**8. 基于符号树的代码表示法。**\n\n**9. 全语言随时可用。** 读取时、编译时与运行时之间没有严格界限。你可以在读取时编译或运行代码，在编译时读取或运行代码，在运行时读取或编译代码。\n\n读取时运行代码让用户能重定义Lisp语法；编译时运行代码是宏的基础；运行时编译支持Lisp作为Emacs等程序的扩展语言；运行时读取则使程序能通过s表达式通信——这一思想后来以XML形式被重新发明。",
  "timestamp": "2025-07-14T13:49:49.471426",
  "model": "deepseek-ai/DeepSeek-V3"
}