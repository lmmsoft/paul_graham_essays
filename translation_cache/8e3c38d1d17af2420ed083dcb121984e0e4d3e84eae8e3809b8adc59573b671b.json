{
  "original": "I think a lot of the most exciting new applications that get written in the next twenty years will be Web-based applications, meaning programs that sit on the server and talk to you through a Web brow...",
  "translation": "我认为未来二十年最令人兴奋的新应用程序大多将是基于网络的应用，即那些驻留在服务器上、通过网页浏览器与用户交互的程序。而编写这类程序，我们可能需要一些新的工具。\n\n首先，我们需要支持基于服务器的应用程序发布新方式。与桌面软件每年发布一两个大版本不同，服务器应用以一系列小变更的形式持续发布，每天可能有多达五到十次更新。通常所有用户都会始终使用最新版本。\n\n正如程序需要设计为可调试的，服务器软件同样需要设计为可变更的——你必须能轻松修改它，或至少能判断哪些改动是轻微的，哪些是重大的。\n\n另一个出人意料但对服务器软件可能有用的概念是\"续体\"（continuations）。在无状态的网络会话中，你可以采用类似\"续体传递风格\"的技术来实现[子程序](lwba.html)的效果。如果成本可控，真正的续体机制或许值得引入。\n\n**4. 还有哪些新抽象等待发现？**\n\n这或许有些理想化，但我个人非常渴望能发现一种新的抽象机制——其重要性堪比一等函数、递归甚至关键字参数。虽然这类突破并不常见，但我始终在探寻。\n\n**1. 语言选择自由**\n\n过去编写应用就意味着开发桌面软件，而桌面软件存在强烈倾向：必须使用与操作系统相同的语言开发。因此十年前，软件开发几乎等同于用C语言编程。久而久之形成了一种传统：应用软件不得使用非常规语言，这种观念甚至渗透到管理者和风投等非技术群体中。\n\n服务器软件彻底颠覆了这一模式。你可以自由选择任何编程语言，尽管目前大多数人（尤其是管理者和风投）尚未意识到这一点。少数黑客明白这个道理，这正是我们还能听到Perl、Python等新兴语言的原因——它们并非因开发Windows应用而闻名。\n\n这对语言设计者意味着：我们的工作终于可能迎来真正的受众。\n\n**2. 性能优化源于分析器**\n\n语言设计者（至少实现者）热衷于编写能生成高效代码的编译器。但真正提升用户体验的速度并非来源于此。Knuth早已指出：性能瓶颈往往只存在于少数关键路径，而这些路径无法凭空猜测。分析器才是答案所在。\n\n语言设计者正在解决错误的问题。用户不需要基准测试跑得多快，他们需要的是能精准定位程序瓶颈的语言工具。这才是实践中性能提升的来源。如果将编译器优化的时间抽出一半用于开发优秀的分析器，或许会带来更显著的整体收益。\n\n**3. 语言设计需要应用场景驱动**\n\n这或许不是铁律，但最优秀的语言往往伴随着特定应用场景共同演化：C语言诞生于系统编程需求，Lisp的部分发展动力来自符号微分计算——McCarthy在1960年首篇Lisp论文中就迫不及待地开始编写微分程序。\n\n如果应用场景涉及解决新问题则更为理想，这会推动语言产生程序员真正需要的新特性。我个人感兴趣的是打造适合服务器应用开发的语言。\n\n[讨论环节中Guy Steele也强调这一点，并补充建议：除非专门用于编译器开发，否则语言的应用场景不应局限于编写自身的编译器。]\n\n**4. 语言必须擅长编写临时程序**\n\n临时程序指为特定任务快速编写的简易程序。仔细观察会发现，许多严肃的大型程序最初都是临时程序。甚至可能大多数软件都始于临时程序阶段。因此要打造通用编程语言，必须首先擅长编写临时程序——这是多数软件的雏形阶段。\n\n**5. 语法与语义的关联**\n\n传统观念认为语法与语义完全分离。但令人惊讶的是，它们可能存在深层联系。Robert Morris曾指出：在中缀语法语言中，操作符重载的价值更为显著。在前缀语法语言中，任何自定义函数本质上都是操作符；而在中缀语言中，重载操作符与函数调用的视觉差异极大。\n\n**1. 新编程语言的复兴**\n\n1970年代曾掀起设计新语言的浪潮，近期虽式微，但服务器软件将重启这一趋势。当语言选择不再受限时，只要出现真正优秀的语言设计，就有人愿意冒险尝试。\n\n**2. 分时系统的回归**\n\nRichard Kelsey在上次讨论中提出分时理念将复兴，我完全赞同。与微软的判断类似，大量计算将从桌面转移到远程服务器——分时模式正在回归。这需要语言层面的支持，例如Richard和Jonathan Rees已在Scheme 48中实现了大量进程调度工作。\n\n**3. 效率重现重要性**\n\n当人们开始讨论字节码（暗示计算资源过剩）时，似乎计算机性能已足够强大。但服务器软件将改变这一认知：硬件成本需要真实支付，单机承载用户数直接决定资本回报率。\n\n因此效率再次成为关键，尤其在I/O性能方面——这正是服务器应用的核心瓶颈。当前Sun与微软的\"字节码之战\"更多是商业策略，字节码本身未必是最优解。若这个战场最终被绕过，倒不失为趣事。\n\n**1. 客户端终将式微**\n\n我的预测是：绝大多数应用将采用纯服务器架构。假设所有用户都安装特定客户端，就如同假设全社会绝对诚实——虽然便利，但绝不可行。\n\n未来将涌现各种具备基础网络功能的设备，但唯一可确定的共性就是支持简单HTML和表单。手机浏览器？PDA通话功能？黑莓大屏？游戏手表？与其猜测设备形态，不如将所有[智能集中于服务器](road.html)——这才是稳健之选。\n\n**2. 面向对象编程的反思**\n\n尽管存在争议，但我认为面向对象编程被过度神话。它对窗口系统、仿真、CAD等需要特定数据结构的应用是优秀模型，但不该成为编程的普适范式。\n\n大公司青睐面向对象的部分原因在于它制造了大量\"看似专业\"的代码——本该用整数列表简单表达的概念，被包装成充满样板代码的类结构。\n\n面向对象的方法虽能模拟一等函数的部分功能，但对Lisp程序员而言这早已过时。拥有真正的一等函数时，你可以根据任务灵活运用，而非强迫所有逻辑适配类与方法的框架。\n\n这对语言设计的启示是：不应深度绑定面向对象范式。或许更好的方案是提供更通用的底层机制，让人们通过库来实现各类对象系统。\n\n**3. 委员会设计的陷阱**\n\n委员会设计语言不仅是众所周知会导致臃肿和不一致，更深层的危机在于规避风险。个人主导时敢于尝试的创新，在委员会决策中永远无法通过。\n\n但语言设计是否需要冒险？许多人认为应当遵循传统智慧。然而所有创造性活动的回报都与风险成正比，语言设计何尝例外？\n\n---\n\n[日语译本](http://d.hatena.ne.jp/lionfan/20070215)",
  "timestamp": "2025-07-14T14:06:42.109076",
  "model": "deepseek-ai/DeepSeek-V3"
}