{
  "original": "If I didn't know Lisp, reading this would set me asking questions. A language that would make me a better programmer, if it means anything at all, means a language that would be better for programming...",
  "translation": "如果我不懂Lisp，读到这段话时一定会产生疑问。一门能让我成为更优秀程序员的语言——如果这说法真有意义——必然意味着它本身就是更优秀的编程语言。而这正是埃里克话中隐含的真意。\n\n只要这种理念仍在流传，我相信黑客们对一门新Lisp语言仍会保持足够热情，哪怕它仍沿用Lisp之名。但这款Lisp必须延续1970年代经典Lisp的特质，成为真正的黑客语言：简洁、纯粹、可深度定制。更重要的是，它必须配备强大的函数库来满足当代黑客的核心需求。\n\n在函数库方面，新Lisp完全有可能在Perl和Python的主场击败它们。未来数年需要开发的大量新应用都将属于[基于服务器的应用](road.html)。新Lisp没有理由不配备媲美Perl的字符串处理库——如果再拥有强大的服务器应用开发库，其流行将水到渠成。真正的黑客从不会对能通过几个库调用就解决复杂问题的新工具嗤之以鼻。记住，黑客骨子里是懒惰的。\n\n若能在语言核心层面支持服务器应用开发，优势将更为显著。例如直接支持多用户程序，或在类型标记层面实现数据所有权管控。\n\n服务器应用也解答了\"新Lisp用于开发什么\"的疑问。提升Lisp作为Unix脚本语言的能力固然有益（毕竟现状已难以更糟），但现有语言体系的薄弱环节才是更好的突破口。或许可以效仿Tcl的模式，将Lisp与完整的服务器应用支撑系统捆绑提供。Lisp天生适合服务器开发：词法闭包能在基于网页的交互中实现子程序效果；S表达式可完美映射到HTML；宏系统则擅长动态生成内容。当前既需要更好的服务器应用开发工具，也需要新Lisp语言，二者结合将相得益彰。\n\n**12 理想语言**\n\n总结而言，让我们尝试描绘黑客的梦想语言：它必须[优雅](taste.html)、简洁、凝练。具备快速启动的交互式顶层环境，能用极简代码解决常见问题。你所写的程序几乎完全由业务逻辑构成——其他一切均已预先实现。\n\n其语法精简到极致，从不需要输入冗余字符，甚至鲜少用到Shift键。\n\n借助高级抽象，你能快速完成程序原型。优化阶段则配备精准的性能分析器定位瓶颈。你可以让内循环极速运行，必要时甚至能直接内联字节码。\n\n大量优质示例可供学习，语言的直觉性设计让你数分钟内就能通过例子掌握用法。几乎无需查阅手册——那本薄册子鲜少警告和限制说明。\n\n语言核心精炼，函数库强大而高度正交，其设计精度与语言核心等同。所有库完美协同，如同精密相机部件般严丝合缝。没有废弃设计，也不为兼容性保留累赘。所有库源码触手可及，与操作系统及其他语言程序的交互轻而易举。\n\n语言采用分层架构，高层抽象以完全透明的方式构建于底层抽象之上，必要时你可直取本源。\n\n除非绝对必要，没有任何隐藏机制。语言提供的抽象仅用于减轻工作量，而非限制思维。事实上，它鼓励你平等参与设计——你可以改变包括语法在内的任何部分，你编写的代码与预定义组件具有同等地位。\n\n**注释**\n\n[1] 蒂莫西·哈特在1964年提出的宏概念已接近现代形态，比Lisp 1.5发布晚两年。初期缺乏的是避免变量捕获和多重求值的机制——哈特的例子都存在这两个问题。\n\n[2] 在《当空气击中大脑》中，神经外科医生弗兰克·维托西克记载了住院总医师加里关于外科医生与内科医生（\"跳蚤\"）区别的谈话：",
  "timestamp": "2025-07-14T13:32:53.353105",
  "model": "deepseek-ai/DeepSeek-V3"
}