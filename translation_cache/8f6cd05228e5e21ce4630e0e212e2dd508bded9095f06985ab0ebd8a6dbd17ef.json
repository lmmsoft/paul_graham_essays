{
  "original": "| | [](index.html)  \n  \n|   \n  \n|  **Want to start a startup?** Get funded by [Y Combinator](http://ycombinator.com/apply.html).    \n  \n---  \n  \nMay 2002  \n  \n|  \"We were after the C++ programmers. We...",
  "translation": "| | [](index.html)  \n  \n|   \n  \n|  **想创业吗？** 获得[Y Combinator](http://ycombinator.com/apply.html)的资助。    \n  \n---  \n  \n2002年5月  \n  \n|  “我们原本瞄准C++程序员，结果成功把他们中的许多人拽到了离Lisp还剩一半路程的地方。”  \n  \n——Java规范合著者 Guy Steele   \n---  \n  \n  \n软件行业始终存在着两股势力的斗争：一派是脑袋尖尖的学院派，另一派是同样难缠的头发尖尖的老板派。大家都知道“头发尖尖的老板”是什么形象吧？我相信科技界大多数人不仅认得这个漫画角色，还能在自己公司里找到对应的真人原型。  \n\n这位头发尖尖的老板神奇地结合了两种常见却鲜少共存的特质：(a) 他对技术一窍不通；(b) 却对技术决策有着异常坚定的主张。  \n\n举个例子，假设你需要开发一款软件。这位老板既不懂软件运行原理，也分不清编程语言的区别，却能斩钉截铁地指定开发语言——必须是Java。  \n\n为什么？让我们透视他的思维逻辑：Java是行业标准（因为媒体总在报道），选用它就不会惹麻烦；既然是标准，Java程序员必然遍地都是，当前团队若像往常一样神秘离职，替补人手随时能找到。  \n\n这套说辞看似合理，实则建立在某个未被言明的错误假设上：老板认为所有编程语言都差不多。若真如此，他的选择确实明智——既然语言没差别，随大流最稳妥。  \n\n但语言之间真的没有优劣之分吗？我们甚至无需讨论具体差异就能证伪这一点。若在1992年问同一位老板该用什么语言，他会毫不犹豫回答C++。如果语言真没区别，为何他的答案会随时间改变？更根本的问题是：若语言等同，Java开发者何必费心创造新语言？  \n\n显然，新语言的诞生必然源于对旧语言的改进。Java之父高斯林在白皮书中明确表示，Java正是为解决C++的某些缺陷而设计。至此矛盾显现：语言并非等同。顺着老板的思维追溯到Java，再回溯Java的诞生动机，最终得出的结论恰恰推翻了他最初的假设。  \n\n那么谁是对的？高斯林还是头发尖尖的老板？答案不言自明。特定场景下，某些语言确实更具优势。这引出了更深层的问题：Java针对哪些场景优化？何时该用Java而非C++？是否存在比二者更优的其他选择？  \n\n一旦开始思考这些问题，就如同打开了潘多拉魔盒。若老板必须处理如此复杂的决策，他的大脑恐怕会当场宕机。只要坚信语言等同，他只需选择最流行的选项——这本就是时尚而非技术问题，他或许还能蒙对。但若承认语言差异，他就得同时求解两道难题：既要评估二十多种主流语言对当前需求的适配度（对此他一无所知），又要权衡每种语言的程序员储备和库资源（同样超出他的认知）。面对这扇门后的复杂世界，老板选择回避也就不足为奇了。  \n\n坚信语言等同的代价是背离真相，但好处是让生活简单得多。我认为这正是该观点盛行的主因——它令人心安理得。  \n\n我们觉得Java肯定很优秀，因为它是时髦的新语言。但果真如此吗？从宏观视角看，Java确实是编程语言界的新贵（尤其当你的视野被Sun公司的巨幅广告占据时）。但贴近观察会发现，极客圈对“酷”的评判存在梯度：在黑客亚文化中，Perl的酷炫指数远超Java（比如Slashdot就用Perl搭建，你绝对看不到这帮人用JSP）。而比Perl更年轻的Python，其用户又对Perl流露出优越感，还有[更多](accgen.html)新语言正在崛起。  \n\n观察Java、Perl、Python的演进轨迹，会发现耐人寻味的规律——至少Lisp黑客能看出来。每种新语言都越来越像Lisp，Python甚至复刻了被许多Lisp黑客视为设计缺陷的特性。如今简单Lisp程序已能逐行翻译成Python。2002年的编程语言，终于快要追上1958年的水准。  \n\n**追赶数学的脚步**  \n\n我的意思是：约翰·麦卡锡在1958年发现的Lisp语言，其理念直到今天才被主流编程语言逐步赶上。  \n\n这怎么可能？计算机技术不是日新月异吗？1958年的计算机还是冰箱大小的庞然大物，运算能力堪比电子表。如此古老的技术怎会仍具价值，甚至优于最新成果？  \n\n答案在于：Lisp最初根本不是作为现代意义上的编程语言设计的。我们所说的编程语言是向计算机下达指令的工具。虽然麦卡锡最终确实想开发这种工具，但实际成型的Lisp却源于他的[理论探索](rootsoflisp.html)——为图灵机寻找更便捷的替代方案。正如他后来所言，",
  "timestamp": "2025-07-14T02:30:57.389905",
  "model": "deepseek-ai/DeepSeek-V3"
}