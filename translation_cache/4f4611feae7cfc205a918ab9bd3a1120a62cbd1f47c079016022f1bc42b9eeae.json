{
  "original": "  2. **Work in long stretches.** Since there's a fixed cost each time you start working on a program, it's more efficient to work in a few long sessions than many short ones. There will of course come...",
  "translation": "2. **长时间连续工作。** 由于每次开始编程时都有固定的启动成本，因此长时间集中工作比多次短时间工作更高效。当然，过度疲劳会导致效率下降——这个临界点因人而异。我听说过有人能连续编程36小时，但我个人最多只能坚持18小时，而最佳状态通常不超过12小时。  \n\n身体承受极限并非最优解。分段工作既有代价也有益处：有时休息后重返问题，你会发现潜意识已为你准备好了答案。  \n\n3. **使用简洁的语言。** 更强大的编程语言能让代码更短。程序员思考程序时往往受所用语言的影响。语言越简洁，程序就越短，也越容易在脑中加载和留存。  \n\n采用自底向上的编程风格能放大高效语言的优势：通过分层编写程序，底层代码充当上层的编程语言。若处理得当，你只需在脑中维护最顶层的逻辑。  \n\n4. **持续重写程序。** 重写常能催生更清晰的设计。即便没有这个效果，重写也迫使你完全理解程序——这是将代码装入大脑的最佳方式。  \n\n5. **编写可重读的代码。** 所有程序员都知道代码可读性很重要。但你自己才是最重要的读者，尤其是在初期——原型阶段就是与自我的对话。为自己写代码时，优先级会有所不同：为他人编写时可能需要避免过度紧凑，像教科书般展开某些部分；而为脑内重载优化时，简洁才是王道。  \n\n6. **小团队协作。** 当你在脑中构建程序时，思维边界往往止于自己负责的代码。对其他部分的理解会打折扣，更重要的是无法自由修改。因此团队规模越小，项目越能彻底演化。若只有一名程序员（初期常见），你甚至能进行全盘重构。",
  "timestamp": "2025-07-14T12:17:30.264444",
  "model": "deepseek-ai/DeepSeek-V3"
}