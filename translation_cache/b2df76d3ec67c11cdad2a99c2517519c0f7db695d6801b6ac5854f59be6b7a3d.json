{
  "original": "When Lisp first appeared, these ideas were far removed from ordinary programming practice, which was dictated largely by the hardware available in the late 1950s. Over time, the default language, embo...",
  "translation": "当Lisp首次问世时，这些理念与1950年代末期受硬件限制的主流编程实践相去甚远。随着时间的推移，以一系列流行语言为代表的默认语言正逐步向Lisp靠拢。理念1-5现已广泛普及，理念6开始进入主流视野，Python虽具备理念7的某种形式却缺乏对应语法。\n\n而理念8可能是其中最耐人寻味的。理念8和9能成为Lisp的一部分纯属偶然，源于Steve Russell实现了McCarthy从未打算落地的构想。正是这些意外造就了Lisp奇特的外表与最鲜明的特质。Lisp的怪异并非源于特殊语法，而是因其本质上没有语法——你直接操作的是其他语言解析时生成的语法树，这些由Lisp原生链表构成的数据结构。\n\n用语言自身的数据结构来表达程序被证明是革命性的特性。理念8与9的结合意味着你能编写生成程序的程序。这听起来或许离奇，却是Lisp的日常实践，最典型的实现方式就是宏。\n\n\"宏\"在Lisp中的内涵远超其他语言。从简写到新语言的编译器，Lisp宏无所不包。若要真正理解Lisp或拓展编程视野，深入宏机制至关重要。\n\n据我所知，真正的宏系统仍是Lisp的独门绝技。部分原因在于实现宏需要承受Lisp式的语法异质，更因为一旦突破这层能力极限，你所创造的将不再是新语言，而是Lisp的新方言。\n\n虽是玩笑却属事实：若某语言包含car、cdr、cons、quote、cond、atom、eq等基本操作，以及基于链表的函数表示法，你就能重建整个Lisp体系——这正是McCarthy设计Lisp时的核心追求。\n\n**语言的用武之地**\n\n假设Lisp确为渐进逼近的极限，是否意味着应该用它开发软件？选择弱语言会损失多少？保持技术领先是否永远明智？流行度本身能否成为理由？比如技术外行主管坚持选用易招聘的语言是否正确？\n\n当然存在编程语言无关紧要的项目。通常应用越复杂，强语言的杠杆效应越显著。但多数项目并不苛刻，日常编程多为胶水代码，此时选用熟悉且库支持良好的语言即可。例如Windows应用间数据传输，Visual Basic足矣。\n\n虽能用Lisp编写胶水程序（我常用作桌面计算器），但其真正优势在于解决竞争激烈的复杂问题。典型案例是ITA软件为Orbitz开发的机票搜索系统——在Travelocity和Expedia垄断的市场中，他们用技术碾压了对手。\n\nITA的核心是20万行Common Lisp代码，其搜索能力超越仍在使用大型机时代技术的竞争对手数个量级。虽然ITA本质上也在使用\"大型机时代语言\"，但其工程师透露大量使用宏的事实毫不令人意外。\n\n**向心力作用**\n\n非常规技术确有代价，技术外行主管的担忧不无道理。但因认知局限，他们往往夸大风险。\n\n使用小众语言可能引发三个问题：与其他语言交互障碍、可用库较少、招聘困难。这些问题的严重性取决于场景。若控制整个系统（如ITA掌握全部源码），语言选择完全自主，兼容性问题可自行修复。\n\n服务器端应用更能接纳先进技术，这正是Jonathan Erickson所称\"编程语言复兴\"的主因。Perl和Python的兴起正源于服务器端应用。随着软件从桌面转向服务器（微软也不得不接受的趋势），中庸技术的压力将日益减弱。\n\n库的重要性因项目而异：简单问题中现成库的价值可能超越语言本身。但对企业级软件产品（需多名程序员耗时半年以上开发），强语言的优势终将显现。\n\n关于招聘难题实属过虑：优秀软件团队从不超过十人，任何知名语言都能满足此规模需求。若连十个Lisp程序员都招不到，恐怕公司选址本身就有问题。实际上，强语言可能缩减团队规模——既因需求减少，也因使用先进语言的程序员通常更优秀。\n\n在Viaweb（现Yahoo Store）时期，我们使用Lisp、廉价Intel服务器、FreeBSD系统、无视SET标准等决策曾令投资人和收购方侧目。但最终证明，正是这些非常规选择创造了被收购的价值。\n\n创业者当为用户而非投资人设计产品。赢得用户则万事俱备，失去用户则技术正统毫无意义。\n\n**平庸的代价**\n\n弱语言的效率损失有据可循。代码规模是最直观的衡量标准——高级语言提供更大抽象单元，如同用更少砖块砌同等围墙。强语言程序更短（非指字符数，而是独立元素量）。\n\n强语言缩短代码的秘诀在于自底向上编程：在基础语言之上构建领域专用语言，再以其编写应用。这种组合代码远比纯基础语言实现更精简——正如压缩算法原理。其可维护性也更优，因为语言层通常无需改动。\n\n代码规模至关重要，因为开发时间主要取决于长度。若某语言使代码膨胀三倍，耗时必然三倍——且无法通过增员解决，因为超限后新人只会拖累进度。Fred Brooks在《人月神话》中阐述的现象已被广泛证实。\n\nLisp相较C语言的代码压缩比普遍达7-10倍。而《新架构师》杂志引述ITA总裁称\"一行Lisp可抵二十行C\"。鉴于ITA系统混合使用Lisp/C++，此数据可信度较高。\n\n我认为该倍数并非恒定——问题越复杂，程序员越优秀，差距越大。顶尖黑客能更充分释放工具潜能。\n\n以ITA为例：若你用C语言竞争，其开发速度将领先20倍。你耗时一年的功能，他们三周即可复现；他们三个月的新成果，你需要五年追赶——这还是最理想状况。实际上，当底层语言超出人脑负荷极限时，项目很可能永远无法完成。\n\n虽属极端案例（ITA团队异常优秀，C语言相对底层），但竞争市场中即便2-3倍效率差也足以决定生死。\n\n**成功配方**\n\n技术外行主管拒绝思考这种可能性。只要失败无法归咎，他们甘愿公司落败。个人最安全的策略就是随大流。\n\n大企业称之为\"行业最佳实践\"——实为推卸责任的护身符。选择\"最佳实践\"意味着失败时无需担责：是行业的选择，而非个人决策。\n\n该术语原用于会计领域，核心是\"避免特立独行\"。这在财务领域或许合理（\"前沿\"与\"会计\"本就违和），但套用于技术决策就会酿成错误。技术本应追求前沿，正如Erann Gat所言：\"行业最佳实践\"带来的只是平庸。当决策导致开发效率被激进对手碾压时，\"最佳\"已成谬称。\n\n因此我们获得两个珍贵认知：1. 语言能力存在差异；2. 多数管理者刻意忽视。二者结合便是致富配方。ITA的成功印证了这点：在软件行业制胜，只需挑战最难问题，选用最强语言，静待竞争对手的平庸管理者自缚手脚。",
  "timestamp": "2025-07-14T12:01:43.920086",
  "model": "deepseek-ai/DeepSeek-V3"
}