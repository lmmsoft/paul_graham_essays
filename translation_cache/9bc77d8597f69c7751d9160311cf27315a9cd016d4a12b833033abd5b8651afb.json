{
  "original": "The study also deals explictly with a point that was only implicit in Brooks' book (since he measured lines of debugged code): programs written in more powerful languages tend to have fewer bugs. That...",
  "translation": "这项研究还明确探讨了布鲁克斯书中仅隐含提及的观点（因为他测量的是调试后的代码行数）：用更强大的语言编写的程序往往错误更少。对于像网络交换机这样的应用，这本身就成为了目的，可能比程序员的生产效率更重要。\n\n**品味测试**\n\n最终，我认为你必须跟随直觉。用这种语言编程感觉如何？我认为找到（或设计）最佳语言的方法是变得对语言如何让你思考极其敏感，然后选择/设计感觉最好的语言。如果某些语言特性笨拙或限制性强，别担心，你会察觉到的。\n\n这种高度敏感会带来代价。你会发现无法忍受用笨拙的语言编程。我觉得没有宏的语言编程限制性令人难以忍受，就像习惯动态类型的人无法忍受必须回到需要声明每个变量类型、且不能创建不同类型对象列表的语言编程一样。\n\n不只我这样。我认识许多Lisp黑客都有这种感受。事实上，衡量编程语言相对能力最准确的指标可能是：了解该语言的人中，愿意为使用该语言接受任何工作（无论应用领域）的比例。\n\n**限制性**\n\n我认为大多数黑客都明白语言感觉受限意味着什么。当你感到受限制时发生了什么？我想这就像你想走的路被堵住，不得不绕远路到达目的地。你有话想说，但语言不允许。\n\n我认为真正的问题在于，限制性语言就是不够简洁的语言。问题不仅在于无法按计划表达，更在于语言迫使你绕的弯路更长。做个思想实验：假设你想写某个程序，语言不允许你按计划表达，但强迫你用更短的其他方式写出来。至少对我来说，这不会感觉很受限。就像想走的路被堵住，路口的警察却指引你走捷径而非绕路。太棒了！\n\n我认为限制感大多（90%？）源于被迫用比脑中更冗长的语言写程序。限制性主要源于缺乏简洁性。所以当语言感觉受限时，大多意味着它不够简洁；而不简洁的语言自然会感觉受限。\n\n**可读性**\n\n开篇引文还提到另外两个特质：规律性和可读性。我不确定规律性是什么，也不清楚规律且可读的代码比单纯可读的代码有何优势（如果有的话）。但我想我明白可读性的含义，它也与简洁性相关。\n\n这里我们必须谨慎区分单行代码的可读性和整个程序的可读性。后者才是关键。我承认一行Basic可能比一行Lisp更易读。但用Basic写的程序会比用Lisp写的相同程序行数更多（尤其是进入格林斯潘领域后）。阅读Basic程序的总工作量必然更大。",
  "timestamp": "2025-07-14T02:32:01.792073",
  "model": "deepseek-ai/DeepSeek-V3"
}