{
  "original": "| | [](index.html)  \n  \n|   \n  \n  \n  \nThere is a kind of mania for object-oriented programming at the moment, but  some of the [smartest programmers](reesoo.html) I know are some of the least excited ...",
  "translation": "| | [](index.html)  \n\n|   \n\n目前有一种对面向对象编程的狂热，但我认识的一些[最聪明的程序员](reesoo.html)却对此最不感兴趣。  \n\n我个人的看法是，面向对象编程在某些情况下是一种有用的技术，但它并不需要渗透到你编写的每一个程序中。你应该能够定义新类型，但不应该被迫将每个程序都表达为新类型的定义。  \n\n我认为人们喜欢面向对象编程有五个原因，其中三个半是不好的：  \n\n1. 如果你的静态类型语言缺乏词法闭包或宏，面向对象编程会显得很吸引人。在某种程度上，它提供了一种绕过这些限制的方法。（参见[格林斯潘第十定律](quotes.html)。）  \n\n2. 面向对象编程在大公司中很受欢迎，因为它适合他们的软件开发方式。在大公司，软件通常由庞大（且频繁变动）的平庸程序员团队编写。面向对象编程为这些程序员强加了一种纪律，防止任何一个人造成太大的破坏。代价是生成的代码充斥着协议和大量重复。这对大公司来说不算太高的代价，因为他们的软件可能无论如何都会臃肿且充满重复。  \n\n3. 面向对象编程会生成许多看似工作量很大的内容。在折叠打印纸的时代，有一种程序员每页只放五到十行代码，前面加上二十行格式精美的注释。面向对象编程对这些人来说就像毒品：它让你把所有脚手架都塞进源代码中。Lisp黑客可能只需将一个符号推入列表就能解决的问题，在这里变成了一整个文件和类方法。因此，如果你想说服自己或别人你做了很多工作，这是一个好工具。  \n\n4. 如果语言本身是一个面向对象的程序，用户就可以扩展它。嗯，也许吧。或者，你也可以通过提供面向对象编程的子概念来做得更好。例如，重载并不本质地与类绑定。我们拭目以待。  \n\n5. 面向对象的抽象可以清晰地映射到某些特定类型程序的领域，比如模拟和CAD系统。",
  "timestamp": "2025-07-14T12:35:03.365454",
  "model": "deepseek-ai/DeepSeek-V3"
}