{
  "original": "  1. By making the language do more of the work, bottom-up design yields programs which are smaller and more agile. A shorter program doesn't have to be divided into so many components, and fewer comp...",
  "translation": "1. 通过让语言承担更多工作，自底向上设计能产出更精简、更灵活的程序。较短的程序无需被拆分成过多组件，更少的组件意味着程序更易于阅读或修改。组件减少也意味着组件间的连接更少，从而降低出错概率。正如工业设计师努力减少机器中的活动部件，经验丰富的Lisp程序员运用自底向上设计来降低程序的规模和复杂度。\n\n2. 自底向上设计促进代码复用。当你编写两个及以上程序时，为首个程序编写的许多工具函数在后续程序中同样适用。一旦积累了大量基础工具集，编写新程序所需精力可能仅为从原始Lisp起步的零头。\n\n3. 自底向上设计提升程序可读性。这类抽象实例要求读者理解通用运算符；而函数式抽象实例则要求理解专用子程序。[1]\n\n4. 由于这种设计促使你持续关注代码中的模式，自底向上工作有助于厘清程序设计思路。若程序中两个相距较远的组件形式相似，你会自然注意到这种相似性，并可能以更简洁的方式重构程序。\n\n在非Lisp语言中，自底向上设计也能实现到某种程度。任何库函数的存在都体现着这种设计。但Lisp在这方面赋予开发者更强大的能力，语言扩展在Lisp编程风格中占据更核心地位——这种差异如此显著，使得Lisp不仅是独特的语言，更代表着截然不同的编程范式。\n\n诚然，这种开发风格更适合小团队编写的程序。但与此同时，它拓展了小团队的能力边界。在《人月神话》中，弗雷德里克·布鲁克斯提出程序员群体的生产力并不随规模线性增长。随着团队扩大，个体程序员的生产力反而下降。而Lisp编程经验为这一定律提供了更乐观的表述：随着团队规模缩小，个体程序员的生产力将提升。相对而言，小团队的优势恰恰在于其\"小\"。当小团队充分运用Lisp提供的技术时，他们能取得[压倒性胜利](avg.html)。\n\n**新动态**：[免费下载《On Lisp》](onlisptext.html)。\n\n* * *\n\n[1] \"但若不理解所有新工具函数，就无法读懂程序。\"此类观点通常存在谬误，具体分析参见第4.8节。\n\n* * *",
  "timestamp": "2025-07-14T13:34:02.243122",
  "model": "deepseek-ai/DeepSeek-V3"
}