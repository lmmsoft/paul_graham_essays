{
  "original": "I'm not as sure that readability is directly proportionate to succinctness as I am that power is, but certainly succinctness is a factor (in the mathematical sense; see equation above) in readability....",
  "translation": "我并不像确信简洁性直接等同于威力那样，确信可读性与简洁性成正比，但简洁性无疑是影响可读性的一个因素（从数学意义上讲；参见上文等式）。因此，声称一门语言的目标是可读性而非简洁性，甚至可能没有意义；这就像说目标是可读性，而非可读性一样。\n\n对于初次接触一门语言的用户来说，每行代码的可读性意味着源代码看起来不会令人望而生畏。因此，强调每行可读性可能是一个好的营销决策，即使它是一个糟糕的设计决策。这与让人们分期付款的成功策略如出一辙：不是用高昂的预付价格吓退他们，而是告诉他们低廉的月付金额。然而，分期付款对买家来说总体上是不利的，就像每行可读性对程序员可能也是如此。买家将不得不支付大量看似低廉的款项；而程序员将不得不阅读大量看似可读的代码行。\n\n这种权衡在编程语言出现之前就已存在。如果你习惯了阅读小说和报纸文章，第一次阅读数学论文可能会令人沮丧。可能需要半小时才能读完一页。然而，我相当确定问题并不在于符号，尽管感觉上可能是这样。数学论文难以阅读是因为其中的思想本身就很难。如果你用散文来表达同样的思想（就像数学家们在发展出简洁符号之前不得不做的那样），它们并不会变得更容易阅读，因为论文会膨胀到一本书的篇幅。\n\n**到什么程度？**\n\n许多人拒绝接受简洁性等于威力的观点。我认为更有用的做法不是简单地争论它们是否相同，而是问：简洁性在多大程度上等于威力？因为显然，简洁性是高级语言的主要目标之一。如果不是全部目标，那么它们还有什么其他目标，这些其他功能相对而言有多重要？\n\n我提出这个问题不仅仅是为了让辩论更加文明。我真的很想知道答案。在什么情况下，一门语言会因为过于简洁而适得其反？\n\n我最初的假设是，除了病态的例子，我认为简洁性可以被视为与威力相同。我的意思是，在任何人们设计的语言中，它们会是相同的，但如果有人想设计一门语言明确反驳这一假设，他们或许能做到。实际上，我甚至对此也不确定。\n\n**语言，而非程序**\n\n我们应该明确，我们讨论的是语言的简洁性，而不是单个程序的简洁性。单个程序当然可能写得过于紧凑。\n\n我在《On Lisp》中写过这一点。一个复杂的宏可能需要节省其自身长度的许多倍才能被认为是合理的。如果编写一个复杂的宏每次使用可以节省十行代码，而宏本身有十行代码，那么使用超过一次就能在代码行数上实现净节省。但这仍然可能是一个糟糕的决定，因为宏定义比普通代码更难阅读。你可能需要使用宏十次或二十次，才能实现可读性的净改善。\n\n我相信每种语言都有这样的权衡（尽管我怀疑随着语言变得更强大，这种权衡的代价会更高）。每个程序员一定都见过一些聪明的家伙通过使用可疑的编程技巧使代码略微缩短的例子。\n\n所以这一点没有争议——至少对我来说没有。单个程序当然可能因为过于简洁而适得其反。问题是，一门语言是否可能如此？一门语言是否会迫使程序员以牺牲整体可读性为代价，写出（在元素上）简短的代码？\n\n很难想象一门语言会过于简洁的一个原因是，如果存在某种过于紧凑的表达方式，可能也存在一种更长的表达方式。例如，如果你觉得使用大量宏或高阶函数的Lisp程序过于紧凑，你可以选择写出与Pascal同构的代码。如果你不想在Arc中将阶乘表示为高阶函数的调用（`(rec zero 1 * 1-)`），你也可以写出一个递归定义：`(rfn fact (x) (if (zero x) 1 (* x (fact (1- x)))))`。尽管我一时想不出任何例子，但我对一门语言是否可能过于简洁的问题很感兴趣。是否存在迫使你以晦涩难懂的方式编写代码的语言？如果有人有例子，我会非常感兴趣。\n\n（提醒：我所寻找的是根据上文概述的“元素”指标非常紧凑的程序，而不仅仅是由于可以省略分隔符和所有东西都有一个字符名称而显得短的程序。）\n\n---\n\n| | [日语翻译](http://www.shiro.dreamhost.com/scheme/trans/power-j.html)  \n  \n| | [俄语翻译](http://www.melikyan.com/dalshe/articles/power.html)  \n  \n| | [Lutz Prechelt: 七种语言的比较](http://wwwipd.ira.uka.de/~prechelt/Biblio/jccpprtTR.pdf)  \n  \n| | [Erann Gat: Lisp vs. Java](http://www.flownet.com/gat/papers/lisp-java.pdf)  \n  \n| | [Peter Norvig 尝试 Prechelt 的测试](http://www.norvig.com/java-lisp.html)  \n  \n| | [Matthias Felleisen: 语言的表达能力](http://www.ccs.neu.edu/scheme/pubs/scp91-felleisen.ps.gz)  \n  \n| | [Kragen Sitaker: 冗余与威力](redund.html)  \n  \n| | [Forth](http://www.colorforth.com/)  \n  \n| | [Joy](http://www.latrobe.edu.au/philosophy/phimvt/joy.html)  \n  \n| | [Icon](http://www.cs.arizona.edu/icon/)  \n  \n| | [J](http://www.jsoftware.com/books/help/primer/contents.htm)  \n  \n| | [K](http://www.cosy.com/language/k-lang.htm)",
  "timestamp": "2025-07-14T02:32:48.457332",
  "model": "deepseek-ai/DeepSeek-V3"
}