{
  "original": "| | [](index.html)  \n  \n|   \n  \nMay 2001   \n  \n_(These are some notes I made for a panel discussion on programming language design at MIT on May 10, 2001.)_  \n  \n  \n  \n  \n  \n **1\\. Programming Languag...",
  "translation": "| | [](index.html)  \n\n|  \n\n2001年5月  \n\n（这是我在2001年5月10日麻省理工学院关于编程语言设计的专题讨论会上准备的笔记。）  \n\n  \n\n**1. 编程语言是为人服务的。**  \n\n编程语言是人们与计算机交流的方式。计算机其实并不在乎使用哪种语言，只要语言没有歧义就行。我们之所以需要高级语言，是因为人类无法直接处理机器语言。编程语言的意义在于保护我们脆弱的人类大脑不被大量细节淹没。  \n\n建筑师知道，某些设计问题比其他问题更关乎人性。桥梁设计是最纯粹、最抽象的设计问题之一，主要任务是用最少的材料跨越给定的距离。而另一端的极端则是椅子设计。椅子设计师必须花时间考虑人类的臀部。  \n\n软件设计同样如此。设计网络数据路由算法是一个优美而抽象的问题，就像设计桥梁。而设计编程语言则像设计椅子：核心在于应对人类的弱点。  \n\n大多数人都不愿承认这一点。设计具有数学美感的系统听起来比迎合人类弱点要吸引人得多。数学美感确实有其价值：某些形式的美感能让程序更易理解。但美感本身并非目的。  \n\n当我说语言必须针对人类弱点设计时，并非指要为糟糕的程序员设计。事实上我认为应该为[最优秀的程序员](design.html)设计，但即使最优秀的程序员也有局限。没人会愿意用所有变量都是带整数下标的字母x的语言编程。  \n\n**2. 为自己和朋友设计。**  \n\n纵观编程语言的历史，许多最优秀的语言都是设计者为自己使用而创造的，而许多最糟糕的语言则是为他人设计的。  \n\n为他人设计的语言总是面向特定群体：那些不如语言设计者聪明的人。因此你会得到一种居高临下的语言。COBOL是最极端的例子，但许多语言都弥漫着这种气息。  \n\n这与语言的抽象程度无关。C语言相当底层，但它是设计者为自己所用而创造的，这正是黑客们喜爱它的原因。  \n\n为糟糕程序员设计语言的理由是：糟糕程序员比优秀程序员多得多。这或许没错。但那少数优秀程序员编写的代码占比却大得不成比例。  \n\n我感兴趣的问题是：如何设计出顶尖黑客会喜爱的语言？我认为这等同于\"如何设计优秀的编程语言\"，但即便两者不同，这至少是个有趣的问题。  \n\n**3. 给予程序员最大限度的控制权。**  \n\n许多语言（尤其是为他人设计的语言）带着保姆心态：它们试图阻止你做一些它们认为对你不利的事情。我推崇相反的方法：尽可能给予程序员更多控制权。  \n\n当我初次学习Lisp时，最吸引我的是它把我视为平等的伙伴。在我之前学过的其他语言中，语言本身和用该语言编写的程序是截然分离的。但在Lisp中，我编写的函数和宏与构成语言本身的那些完全平等。我可以按需重写语言。这种吸引力与开源软件如出一辙。  \n\n**4. 追求简洁。**  \n\n简洁被低估甚至轻视。但若你洞察黑客的内心，会发现他们真心热爱简洁。你多少次听黑客满怀深情地谈起，比如在APL中，他们用短短几行代码就能实现惊人的功能？我认为真正聪明人真正热爱的事物都值得关注。  \n\n几乎所有能让程序更短小的改进都是好的。应该提供大量库函数；所有能隐式表达的就应该隐式表达；语法应该简洁到极致；甚至连命名都应该简短。  \n\n不仅程序要简短，手册也应该薄如蝉翼。手册中很大篇幅被用于解释、限制、警告和特殊情况。如果强迫自己精简手册，最理想的情况是通过修复语言中那些需要大量解释的部分来实现。  \n\n**5. 承认编程的本质。**  \n\n许多人希望编程是数学，或者至少像自然科学。我认为编程更像建筑学。建筑学与物理学相关，因为建筑师必须设计不会倒塌的建筑，但建筑师的真正目标是创造伟大的建筑，而非发现静力学规律。  \n\n黑客热爱的是创造伟大程序。我认为，至少在我们心中，必须记住编写伟大程序是值得钦佩的事，即使这项工作无法轻易转化为研究论文这种传统的学术成果。从智力层面看，设计程序员喜爱的语言与设计体现某个可发表论文概念的糟糕语言同样有价值。  \n\n  \n\n**1. 如何组织大型库？**  \n\n库正成为编程语言日益重要的组成部分。它们也变得越来越庞大，这可能是危险的。如果寻找能实现需求的库函数比自己编写耗时更长，那么这些代码除了让手册变厚外毫无意义。（Symbolics手册就是例证。）因此我们必须研究库的组织方式。理想情况是设计出能让程序员凭直觉猜到正确库调用的库。  \n\n**2. 人们真的害怕前缀语法吗？**  \n\n这是个开放性问题，我思考多年仍无答案。除了数学表达式，前缀语法对我来说非常自然。但Lisp不受欢迎可能仅仅因为语法陌生。如果确实如此，是否要为此做出改变则是另一个问题。",
  "timestamp": "2025-07-14T14:05:41.794500",
  "model": "deepseek-ai/DeepSeek-V3"
}