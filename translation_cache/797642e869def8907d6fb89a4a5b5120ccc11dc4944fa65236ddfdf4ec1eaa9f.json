{
  "original": "When you know nothing, you have to reinvent stuff for yourself, and if you're smart your reinventions may be better than what preceded them. This is especially true in fields where the rules change. A...",
  "translation": "当你一无所知时，就必须自己重新发明一切。如果你足够聪明，你的新发明可能比前人的更好。这在规则不断变化的领域尤为明显。我们所有关于软件的认知都形成于处理器缓慢、内存和磁盘微小的年代。谁知道传统智慧中隐藏着多少过时的假设？而这些假设的修正方式并非通过显式释放，而是更类似于垃圾回收机制——某个无知但聪明的人会重新发明一切，并在过程中自然淘汰某些现有观念。\n\n**劣势**  \n年轻创始人的优势已如上述，那么劣势呢？我将从问题表象出发，追溯其根源。  \n年轻创始人常犯的错误是做出像课堂作业般的作品。我们近期才意识到这点：那些发展滞后的初创公司存在惊人相似性，却难以言明。最终我们明白——他们在制作课堂作业。  \n但这意味着什么？课堂作业的缺陷何在？与真实创业的本质区别是什么？若能解答，不仅对潜在创业者，对所有学生都意义重大，因为这直指所谓\"真实世界\"的核心谜题。  \n课堂作业缺失两大要素：(1)对真实问题的迭代定义；(2)极致投入。  \n前者或许不可避免。课堂作业必然解决虚假问题——真实问题本就稀缺珍贵。若教授要求学生解决真实问题，就会陷入类似\"寻找超越标准模型的新物理范式案例\"的悖论：真正的好问题无法轻易获得。  \n技术领域更因创业公司的进化特性而复杂化。创业者常通过演化过程发现真正该解决的问题：先有构想，实践后才发现应解决的是另一个问题。即便允许动态调整课题，大学课程也缺乏足够时间或市场压力来促成这种进化。因此课堂作业多聚焦实现环节——而这恰是创业中最次要的难题。  \n创业不仅需要构思与实现并行，其实现方式也截然不同——核心目的是打磨创意。初创公司前六个月的产出价值，往往仅在于证明初始想法的谬误。这种认知颠覆极具价值，当你能摆脱大众共有的错误认知时，就占据了优势地位。但课堂作业的思维截然不同：证明初始计划错误只会导致低分。你倾向于让每行代码都服务于\"展示工作量\"的终极目标，而非构建可废弃的中间产物。  \n这引出第二差异：评价标准。教授根据起点与现状的差距评分，而用户只关心现状与需求的剩余距离。市场毫不关心你付出多少努力——用户只要功能实现，否则价值归零。这正是校园与真实世界的本质区别：努力本身不产生回报。\"尽力而为\"根本是成人激励孩子的虚构概念，自然界本不存在。  \n这类善意谎言似乎对孩子有益。可悲的是毕业时没人会列出教育期间的所有谎言，你必须通过现实碰撞来破除迷思。这也解释了为何多数工作强调\"工作经验\"——大学时我无法理解：明明编程能力胜过许多从业者，为何还需要这种神秘经历？  \n如今我明白，部分困惑源于语法误导。\"工作经验\"听似某种机器操作或编程语言的熟练度，实则指代童年习性的祛除。  \n孩子的定义特征之一是易放弃。面对困难时，孩子可以哭喊\"我做不到\"而获得豁免。成人世界虽无人强迫，但代价是失业。在这种压力下，你会发现自己的潜力远超想象。因此雇主期待的\"工作经验\"，本质是祛除逃避本能——培养无借口完成任务的能力。  \n工作经验的另一收获是理解工作本质，特别是其内在残酷性：必须用大部分清醒时间做他人要求之事，否则面临生存危机。少数幸运者能从事兴趣与生计重合的工作，但只需设想二者分离的情形，就能窥见底层真相。  \n成人并非刻意欺骗，而是从未解释金钱契约的实质。从小被问\"长大后想成为什么\"，却无人告知：童年时你骑在他人肩上，而工作意味着被抛入水中独自挣扎。\"成为什么\"只是表象，首要问题是不被淹死。  \n工作与金钱的关系需要逐渐领悟。最初只会觉得\"周一上班真痛苦，还有债务缠身\"，慢慢才意识到这两者被市场紧密捆绑。  \n因此24岁创始人相比20岁者的最大优势，在于清楚自己逃避的是什么。对普通本科生，\"致富\"意味着法拉利或崇拜；而对理解工作金钱关系的人，这代表挣脱99.9%人类受制的残酷等式——致富意味着停止踩水求生。  \n领悟者会以溺水者的求生欲拼命创业。这种认知还会改变工作方式：报酬不来自劳动本身，而来自满足他人需求。明白这点就会自动聚焦用户，从而治愈\"课堂作业综合征\"的另一半。工作一段时间后，你会自然采用市场的衡量标准。  \n当然，不必经年累月才能领悟。若洞察力足够，在校期间即可掌握——Sam Altman就是例证，否则Loopt不会超越课堂作业。如他所示，这种认知极具价值。至少，明白这些就获得了雇主推崇的\"工作经验\"之精髓。而若真正领悟，你能以此创造更大价值。  \n\n**当下**  \n若你考虑毕业后或数年内创业，现在该做什么？求职或读研都有明确准备路径：心仪公司的暑期实习，或本科参与科研项目。创业的等效准备是什么？如何最大化保持选择权？  \n在校期间可学习创业运作机制。可惜这并不容易——几乎没有高校开设创业课程。商学院所谓的\" entrepreneurship\"课程多半浪费时间，因其理念与创业本质相悖。多数创业书籍同样无用，成功创业者无需靠写书谋生，导致该领域书籍多由外行撰写。  \n建议对课程和书籍保持怀疑。了解创业的最佳方式是观察实践，最好是参与其中。本科生如何做到？不妨走后门：频繁出现并主动帮忙。初创公司（理当）对招聘极为谨慎——早期错误聘用代价沉重。但创业公司氛围松散且事务繁杂，若你持续贡献价值，多数团队无暇驱赶。由此逐步建立信任，未来或可转为正式成员。此策略对多数初创公司有效。  \n第二，善用学校的核心优势：联合创始人资源库。观察周围同学，自问愿与谁共事。这个测试可能带来意外发现——那个被忽视的安静者或许比傲慢的\"明星\"更合适。绝非建议讨好你认为会成功的人，恰恰相反：创业将考验友谊极限，必须选择真心喜爱的人合作。关键是主动选择真正钦佩的伙伴，而非被动接受随机社交圈。  \n第三，学习创业所需的特殊技能。这与求职技能可能不同：求职者会学Java/C++等\"雇主需求\"语言，而创业者需选择最高效的工具（如Ruby/Python）。  \n但创始人最重要的技能非编程技术，而是理解用户需求的本能。我反复强调这点，因其至关重要。这是可习得的技能（或更准确说是习惯）：培养\"软件必有用户\"的思维惯性——用户要什么？什么会让他们惊叹？  \n这对本科生尤为珍贵，因为大学编程课普遍缺失\"用户\"概念。传统教学像只教语法不提沟通目的的写作课。幸运的是，如今软件受众仅需一次http请求即可触达。除了课程作业，何不构建真正有用的网站？至少能学习为用户写代码，最佳情况下可能直接成为创业项目——正如Yahoo和Google的起源。  \n\n**注释**  \n[1] 历史上人们为避社群非议甚至不惜伤害子女（当今必有未来视为野蛮的行为），可见保护子女的欲望也非绝对。  \n[2] 若嫌YC要求创始人搬迁三个月太苛刻，说明低估了创业难度——未来你要忍受更大不便。  \n[3] 多数雇佣协议声明：凡涉及公司现有/潜在业务的创意均归公司所有。投资者尽调时往往做最坏推定。  \n安全做法：a) 不使用离职前编写的代码；b) 获取雇主对副业代码的书面弃权声明。许多雇主会选择b)而非失去优秀员工，但需披露项目细节。  \n[4] Adobe的创立只因施乐忽视Geschke和Warnock的成果——若施乐采用他们的发明，二人可能永不会离开帕洛阿尔托研究中心。  \n\n**致谢** Jessica Livingston和Robert Morris审阅本文草稿，Jeff Arnold及SIPB邀请演讲。",
  "timestamp": "2025-07-14T14:08:23.792649",
  "model": "deepseek-ai/DeepSeek-V3"
}